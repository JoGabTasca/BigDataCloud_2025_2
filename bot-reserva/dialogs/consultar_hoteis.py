from botbuilder.dialogs import ComponentDialog
from botbuilder.core import UserState, MessageFactory
from botbuilder.dialogs.prompts import TextPrompt, PromptOptions, ChoicePrompt
from botbuilder.dialogs import WaterfallDialog, WaterfallStepContext
from botbuilder.dialogs.choices import Choice
from helpers.ApiClient import ApiClient

class ConsultarHoteisDialog(ComponentDialog):
    def __init__(self, user_state: UserState):
        super(ConsultarHoteisDialog, self).__init__("ConsultarHoteisDialog")
        self.user_state = user_state
        self.api_client = ApiClient()

        self.add_dialog(TextPrompt(TextPrompt.__name__))
        self.add_dialog(ChoicePrompt(ChoicePrompt.__name__))

        # Registro dos sub-di√°logos
        from .cadastro_cliente import CadastroClienteDialog
        from .nova_reserva_hotel import NovaReservaHotelDialog
        self.add_dialog(CadastroClienteDialog(self.user_state))
        self.add_dialog(NovaReservaHotelDialog(self.user_state))

        self.add_dialog(
            WaterfallDialog(
                "ConsultarHoteisDialog",
                [
                    self.pedir_cpf_step,
                    self.verificar_cliente_step,
                    self.escolher_acao_step,
                    self.processar_step
                ]
            )
        )
        self.initial_dialog_id = "ConsultarHoteisDialog"

    async def pedir_cpf_step(self, step_context: WaterfallStepContext):
        prompt = MessageFactory.text(
            "‚ú® **Bem-vindo ao mundo das hospedagens incr√≠veis!**\n\n"
            "üè® Que emo√ß√£o! Vou te ajudar a encontrar as melhores op√ß√µes de hospedagem.\n\n"
            "üîê **Para come√ßar, informe seu CPF para acessar o sistema:**\n"
            "*Ex: 123.456.789-00*"
        )
        return await step_context.prompt(TextPrompt.__name__, PromptOptions(prompt=prompt))

    async def verificar_cliente_step(self, step_context: WaterfallStepContext):
        cpf = step_context.result
        step_context.values["cpf"] = cpf

        # Verificar se o cliente existe
        cliente = await self.api_client.get_cliente_by_cpf(cpf)

        if not cliente:
            # Cliente n√£o existe, iniciar cadastro
            await step_context.context.send_activity(
                MessageFactory.text(
                    "üîç **Ops! N√£o encontrei seu CPF no nosso sistema...**\n\n"
                    "Mas n√£o se preocupe! üòä\n\n"
                    "‚ú® **Vamos fazer seu cadastro rapidinho para voc√™ aproveitar todos os nossos servi√ßos!**"
                )
            )

            return await step_context.begin_dialog("CadastroClienteDialog", {"cpf": cpf})
        else:
            # Cliente existe, salvar dados e prosseguir
            step_context.values["cliente"] = cliente
            return await step_context.next(cliente)

    async def escolher_acao_step(self, step_context: WaterfallStepContext):
        # Se retornamos do cadastro, usar o cliente cadastrado
        if step_context.result and isinstance(step_context.result, dict):
            step_context.values["cliente"] = step_context.result

        cliente = step_context.values["cliente"]

        choices = [
            Choice("üìã Minhas reservas"),
            Choice("‚ûï Fazer nova reserva"),
            Choice("üîç Buscar hot√©is dispon√≠veis")
        ]

        prompt = MessageFactory.text(
            f"üéâ **Que alegria te ver aqui, {cliente['nome']}!**\n\n"
            f"‚ú® Estou super animado para te ajudar com suas hospedagens!\n\n"
            f"üåü **O que vamos fazer hoje?**"
        )
        return await step_context.prompt(
            ChoicePrompt.__name__,
            PromptOptions(prompt=prompt, choices=choices)
        )

    async def processar_step(self, step_context: WaterfallStepContext):
        escolha = step_context.result.value
        cliente = step_context.values["cliente"]

        if escolha == "üìã Minhas reservas":
            reservas = await self.api_client.get_reservas_hospedagem_by_cliente(cliente["id"])

            if not reservas:
                await step_context.context.send_activity(
                    MessageFactory.text(
                        "üì≠ **Ainda n√£o temos reservas suas por aqui...**\n\n"
                        "Mas isso pode mudar agora mesmo! üòÑ\n\n"
                        "‚ú® **Que tal criarmos sua primeira reserva incr√≠vel?**"
                    )
                )
            else:
                mensagem = (
                    f"üéØ **Aqui est√£o suas reservas, {cliente['nome']}!**\n\n"
                    f"‚ú® Todas as suas aventuras organizadas:\n\n"
                )
                for i, reserva in enumerate(reservas, 1):
                    status_emoji = "‚úÖ" if reserva["status"] == "CONFIRMADA" else "‚è≥"
                    mensagem += f"{status_emoji} **Reserva {i}:**\n"
                    mensagem += f"‚Ä¢ **Hotel:** {reserva['nomeHotel']}\n"
                    mensagem += f"‚Ä¢ **Cidade:** {reserva['cidade']}\n"
                    mensagem += f"‚Ä¢ **Check-in:** {reserva['dataCheckIn']}\n"
                    mensagem += f"‚Ä¢ **Check-out:** {reserva['dataCheckOut']}\n"
                    mensagem += f"‚Ä¢ **Tipo de quarto:** {reserva['tipoQuarto']}\n"
                    mensagem += f"‚Ä¢ **Pre√ßo:** R$ {reserva['precoTotal']}\n"
                    mensagem += f"‚Ä¢ **Status:** {reserva['status']}\n\n"

                await step_context.context.send_activity(MessageFactory.text(mensagem))

        elif escolha == "‚ûï Fazer nova reserva":
            return await step_context.begin_dialog("NovaReservaHotelDialog", {"cliente": cliente})

        elif escolha == "üîç Buscar hot√©is dispon√≠veis":
            todas_reservas = await self.api_client.get_all_reservas_hospedagem()

            if not todas_reservas:
                await step_context.context.send_activity(
                    MessageFactory.text(
                        "üè® **Ops! No momento n√£o temos hot√©is para mostrar...**\n\n"
                        "Mas n√£o desanime! ‚ú®\n\n"
                        "üîÑ **Tente novamente em alguns minutos ou fa√ßa uma nova reserva!**"
                    )
                )
            else:
                mensagem = (
                    "üåü **Olha s√≥ que op√ß√µes incr√≠veis temos para voc√™!**\n\n"
                    "üè® **Hot√©is dispon√≠veis no nosso sistema:**\n\n"
                )
                for i, hotel in enumerate(todas_reservas, 1):
                    mensagem += f"üè® **Hotel {i}:**\n"
                    mensagem += f"‚Ä¢ **Nome:** {hotel['nomeHotel']}\n"
                    mensagem += f"‚Ä¢ **Cidade:** {hotel['cidade']}\n"
                    mensagem += f"‚Ä¢ **Endere√ßo:** {hotel['endereco']}\n"
                    mensagem += f"‚Ä¢ **Check-in:** {hotel['dataCheckIn']}\n"
                    mensagem += f"‚Ä¢ **Check-out:** {hotel['dataCheckOut']}\n"
                    mensagem += f"‚Ä¢ **Tipo de quarto:** {hotel['tipoQuarto']}\n"
                    mensagem += f"‚Ä¢ **Pre√ßo total:** R$ {hotel['precoTotal']}\n"
                    mensagem += f"‚Ä¢ **Status:** {hotel['status']}\n"
                    if hotel.get('telefoneHotel'):
                        mensagem += f"‚Ä¢ **Telefone:** {hotel['telefoneHotel']}\n"
                    mensagem += "\n"

                await step_context.context.send_activity(MessageFactory.text(mensagem))

        return await step_context.end_dialog()