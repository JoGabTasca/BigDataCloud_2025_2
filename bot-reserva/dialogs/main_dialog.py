from botbuilder.dialogs import ComponentDialog
from botbuilder.core import UserState, MessageFactory
from botbuilder.dialogs.prompts import ChoicePrompt, PromptOptions
from botbuilder.dialogs import WaterfallDialog, WaterfallStepContext
from botbuilder.dialogs.choices import Choice

class MainDialog(ComponentDialog):
    
    def __init__(self, user_state: UserState):
        super(MainDialog, self).__init__("MainDialog")
        
        #Grava na memoria aonde o usu√°rio est√° no fluxo de conversa
        self.user_state = user_state
        
        #Registro do Prompt de escolha
        self.add_dialog(ChoicePrompt(ChoicePrompt.__name__))

        #Registro do Dialogo de Consulta de Reserva
        from .consultar_voo import ConsultarVooDialog
        self.add_dialog(ConsultarVooDialog(self.user_state))

        #Registro do Dialogo de Consulta de Hoteis
        from .consultar_hoteis import ConsultarHoteisDialog
        self.add_dialog(ConsultarHoteisDialog(self.user_state))

        #Registro do Dialogo de Cancelamento de Reserva
        from .cancelar_reserva import CancelarReservaDialog
        self.add_dialog(CancelarReservaDialog(self.user_state))

        #Registro de Fun√ß√µes de Conversa√ß√£o Sequencial
        self.add_dialog(
            WaterfallDialog(
                "MainDialog",
                [
                    self.prompt_option_step,
                    self.process_option_step,
                    self.return_to_menu_step
                ]
            )
        )
        self.initial_dialog_id = "MainDialog"
        
    async def prompt_option_step(self, step_context: WaterfallStepContext):
        # Verificar se √© a primeira vez (mensagem de boas-vindas) ou retorno
        user_profile_accessor = self.user_state.create_property("user_profile")
        user_profile = await user_profile_accessor.get(step_context.context, lambda: {})
        
        if not user_profile.get("welcomed", False):
            # Primeira vez - mostrar boas-vindas
            welcome_message = (
                "ü§ñ **Bem-vindo ao Bot de Reservas!**\n\n"
                "Posso te ajudar com:\n"
                "‚úàÔ∏è Consulta de voos e suas reservas\n"
                "üè® Consulta de hot√©is e hospedagens\n" 
                "‚ùå Cancelamento de reservas\n\n"
                "**Escolha uma op√ß√£o abaixo:**"
            )
            user_profile["welcomed"] = True
            await user_profile_accessor.set(step_context.context, user_profile)
        else:
            # Retorno ao menu - mensagem simples
            welcome_message = "üîÑ **Menu Principal**\n\nEscolha uma op√ß√£o:"
        
        choices = [
            Choice("üõ©Ô∏è Consultar Voos"),
            Choice("üè® Consultar Hot√©is"),
            Choice("‚ùå Cancelar Reserva"),
            Choice("‚ÑπÔ∏è Ajuda")
        ]
        
        return await step_context.prompt(
            ChoicePrompt.__name__,
            PromptOptions(
                prompt=MessageFactory.text(welcome_message),
                choices=choices
            )
        )
    async def process_option_step(self, step_context: WaterfallStepContext):
        option = step_context.result.value
        
        if option == "üõ©Ô∏è Consultar Voos":
            # Inicia o dialogo de consulta de voos
            return await step_context.begin_dialog("ConsultarVooDialog")
        elif option == "üè® Consultar Hot√©is":
            # Inicia o dialogo de consulta de hoteis
            return await step_context.begin_dialog("ConsultarHoteisDialog")
        elif option == "‚ùå Cancelar Reserva":
            return await step_context.begin_dialog("CancelarReservaDialog")
        elif option == "‚ÑπÔ∏è Ajuda":
            help_message = (
                "‚ÑπÔ∏è **Central de Ajuda - Bot de Reservas**\n\n"
                "**Como usar o bot:**\n"
                "1Ô∏è‚É£ Selecione uma op√ß√£o no menu principal\n"
                "2Ô∏è‚É£ Informe seu CPF quando solicitado\n"
                "3Ô∏è‚É£ Siga as instru√ß√µes do bot\n\n"
                "**Funcionalidades dispon√≠veis:**\n"
                "‚Ä¢ **Consultar Voos:** Veja suas reservas ou fazer nova reserva\n"
                "‚Ä¢ **Consultar Hot√©is:** Veja suas reservas ou fazer nova reserva\n"
                "‚Ä¢ **Cancelar Reserva:** Cancele suas reservas ativas\n\n"
                "**Informa√ß√µes importantes:**\n"
                "‚Ä¢ Se voc√™ n√£o tem cadastro, o sistema far√° automaticamente\n"
                "‚Ä¢ Use seu CPF para acessar suas informa√ß√µes\n"
                "‚Ä¢ Todas as reservas s√£o salvas no sistema\n\n"
                "üîÑ **Retornando ao menu principal...**"
            )
            await step_context.context.send_activity(MessageFactory.text(help_message))
            return await step_context.replace_dialog("MainDialog")
        
        # Retorna ao menu principal ap√≥s qualquer a√ß√£o
        return await step_context.replace_dialog("MainDialog")
    
    async def return_to_menu_step(self, step_context: WaterfallStepContext):
        # Este step sempre retorna ao menu principal ap√≥s qualquer di√°logo
        return await step_context.replace_dialog("MainDialog")
